/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as NotFoundImport } from './routes/not-found'
import { Route as LoginImport } from './routes/login'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as ContactImport } from './routes/contact'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as BlogIndexImport } from './routes/blog/index'
import { Route as DashboardUploadsImport } from './routes/dashboard/uploads'
import { Route as DashboardSettingsLoadingImport } from './components/settingsLoading'
import { Route as DashboardSettingsImport } from './routes/dashboard'
import { Route as DashboardSecurityImport } from './routes/dashboard/security'
import { Route as DashboardGeneralImport } from './routes/dashboard/general'
import { Route as BlogBlogIdImport } from './routes/blog/$blogId'
import { Route as DashboardBlogBlogDashboardImport } from './routes/dashboard/blog'
import { Route as DashboardBlogNewPageImport } from './routes/dashboard/blog/new'
import { Route as DashboardBlogEditslugPageImport } from './routes/dashboard/blog/edit.$blogId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const NotFoundRoute = NotFoundImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)

const BlogIndexRoute = BlogIndexImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUploadsRoute = DashboardUploadsImport.update({
  id: '/uploads',
  path: '/uploads',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsLoadingRoute = DashboardSettingsLoadingImport.update({
  id: '/settingsLoading',
  path: '/settingsLoading',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardSecurityRoute = DashboardSecurityImport.update({
  id: '/security',
  path: '/security',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardGeneralRoute = DashboardGeneralImport.update({
  id: '/general',
  path: '/general',
  getParentRoute: () => DashboardRoute,
} as any)

const BlogBlogIdRoute = BlogBlogIdImport.update({
  id: '/blog/$blogId',
  path: '/blog/$blogId',
  getParentRoute: () => rootRoute,
} as any)

const DashboardBlogBlogDashboardRoute = DashboardBlogBlogDashboardImport.update(
  {
    id: '/blog/BlogDashboard',
    path: '/blog/BlogDashboard',
    getParentRoute: () => DashboardRoute,
  } as any,
)

const DashboardBlogNewPageRoute = DashboardBlogNewPageImport.update({
  id: '/blog/new/page',
  path: '/blog/new/page',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardBlogEditslugPageRoute = DashboardBlogEditslugPageImport.update({
  id: '/blog/edit/[slug]/page',
  path: '/blog/edit/[slug]/page',
  getParentRoute: () => DashboardRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/blog/$blogId': {
      id: '/blog/$blogId'
      path: '/blog/$blogId'
      fullPath: '/blog/$blogId'
      preLoaderRoute: typeof BlogBlogIdImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/general': {
      id: '/dashboard/general'
      path: '/general'
      fullPath: '/dashboard/general'
      preLoaderRoute: typeof DashboardGeneralImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/security': {
      id: '/dashboard/security'
      path: '/security'
      fullPath: '/dashboard/security'
      preLoaderRoute: typeof DashboardSecurityImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/settingsLoading': {
      id: '/dashboard/settingsLoading'
      path: '/settingsLoading'
      fullPath: '/dashboard/settingsLoading'
      preLoaderRoute: typeof DashboardSettingsLoadingImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/uploads': {
      id: '/dashboard/uploads'
      path: '/uploads'
      fullPath: '/dashboard/uploads'
      preLoaderRoute: typeof DashboardUploadsImport
      parentRoute: typeof DashboardImport
    }
    '/blog/': {
      id: '/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogIndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/blog/BlogDashboard': {
      id: '/dashboard/blog/BlogDashboard'
      path: '/blog/BlogDashboard'
      fullPath: '/dashboard/blog/BlogDashboard'
      preLoaderRoute: typeof DashboardBlogBlogDashboardImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/blog/new/page': {
      id: '/dashboard/blog/new/page'
      path: '/blog/new/page'
      fullPath: '/dashboard/blog/new/page'
      preLoaderRoute: typeof DashboardBlogNewPageImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/blog/edit/[slug]/page': {
      id: '/dashboard/blog/edit/[slug]/page'
      path: '/blog/edit/[slug]/page'
      fullPath: '/dashboard/blog/edit/[slug]/page'
      preLoaderRoute: typeof DashboardBlogEditslugPageImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardGeneralRoute: typeof DashboardGeneralRoute
  DashboardSecurityRoute: typeof DashboardSecurityRoute
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardSettingsLoadingRoute: typeof DashboardSettingsLoadingRoute
  DashboardUploadsRoute: typeof DashboardUploadsRoute
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardBlogBlogDashboardRoute: typeof DashboardBlogBlogDashboardRoute
  DashboardBlogNewPageRoute: typeof DashboardBlogNewPageRoute
  DashboardBlogEditslugPageRoute: typeof DashboardBlogEditslugPageRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardGeneralRoute: DashboardGeneralRoute,
  DashboardSecurityRoute: DashboardSecurityRoute,
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardSettingsLoadingRoute: DashboardSettingsLoadingRoute,
  DashboardUploadsRoute: DashboardUploadsRoute,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardBlogBlogDashboardRoute: DashboardBlogBlogDashboardRoute,
  DashboardBlogNewPageRoute: DashboardBlogNewPageRoute,
  DashboardBlogEditslugPageRoute: DashboardBlogEditslugPageRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/signup': typeof SignupRoute
  '/blog/$blogId': typeof BlogBlogIdRoute
  '/dashboard/general': typeof DashboardGeneralRoute
  '/dashboard/security': typeof DashboardSecurityRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/settingsLoading': typeof DashboardSettingsLoadingRoute
  '/dashboard/uploads': typeof DashboardUploadsRoute
  '/blog': typeof BlogIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/blog/BlogDashboard': typeof DashboardBlogBlogDashboardRoute
  '/dashboard/blog/new/page': typeof DashboardBlogNewPageRoute
  '/dashboard/blog/edit/[slug]/page': typeof DashboardBlogEditslugPageRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/signup': typeof SignupRoute
  '/blog/$blogId': typeof BlogBlogIdRoute
  '/dashboard/general': typeof DashboardGeneralRoute
  '/dashboard/security': typeof DashboardSecurityRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/settingsLoading': typeof DashboardSettingsLoadingRoute
  '/dashboard/uploads': typeof DashboardUploadsRoute
  '/blog': typeof BlogIndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/blog/BlogDashboard': typeof DashboardBlogBlogDashboardRoute
  '/dashboard/blog/new/page': typeof DashboardBlogNewPageRoute
  '/dashboard/blog/edit/[slug]/page': typeof DashboardBlogEditslugPageRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/signup': typeof SignupRoute
  '/blog/$blogId': typeof BlogBlogIdRoute
  '/dashboard/general': typeof DashboardGeneralRoute
  '/dashboard/security': typeof DashboardSecurityRoute
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/settingsLoading': typeof DashboardSettingsLoadingRoute
  '/dashboard/uploads': typeof DashboardUploadsRoute
  '/blog/': typeof BlogIndexRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/blog/BlogDashboard': typeof DashboardBlogBlogDashboardRoute
  '/dashboard/blog/new/page': typeof DashboardBlogNewPageRoute
  '/dashboard/blog/edit/[slug]/page': typeof DashboardBlogEditslugPageRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/login'
    | '/not-found'
    | '/signup'
    | '/blog/$blogId'
    | '/dashboard/general'
    | '/dashboard/security'
    | '/dashboard/settings'
    | '/dashboard/settingsLoading'
    | '/dashboard/uploads'
    | '/blog'
    | '/dashboard/'
    | '/dashboard/blog/BlogDashboard'
    | '/dashboard/blog/new/page'
    | '/dashboard/blog/edit/[slug]/page'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/contact'
    | '/login'
    | '/not-found'
    | '/signup'
    | '/blog/$blogId'
    | '/dashboard/general'
    | '/dashboard/security'
    | '/dashboard/settings'
    | '/dashboard/settingsLoading'
    | '/dashboard/uploads'
    | '/blog'
    | '/dashboard'
    | '/dashboard/blog/BlogDashboard'
    | '/dashboard/blog/new/page'
    | '/dashboard/blog/edit/[slug]/page'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/contact'
    | '/dashboard'
    | '/login'
    | '/not-found'
    | '/signup'
    | '/blog/$blogId'
    | '/dashboard/general'
    | '/dashboard/security'
    | '/dashboard/settings'
    | '/dashboard/settingsLoading'
    | '/dashboard/uploads'
    | '/blog/'
    | '/dashboard/'
    | '/dashboard/blog/BlogDashboard'
    | '/dashboard/blog/new/page'
    | '/dashboard/blog/edit/[slug]/page'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
  NotFoundRoute: typeof NotFoundRoute
  SignupRoute: typeof SignupRoute
  BlogBlogIdRoute: typeof BlogBlogIdRoute
  BlogIndexRoute: typeof BlogIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
  NotFoundRoute: NotFoundRoute,
  SignupRoute: SignupRoute,
  BlogBlogIdRoute: BlogBlogIdRoute,
  BlogIndexRoute: BlogIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/contact",
        "/dashboard",
        "/login",
        "/not-found",
        "/signup",
        "/blog/$blogId",
        "/blog/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/general",
        "/dashboard/security",
        "/dashboard/settings",
        "/dashboard/settingsLoading",
        "/dashboard/uploads",
        "/dashboard/",
        "/dashboard/blog/BlogDashboard",
        "/dashboard/blog/new/page",
        "/dashboard/blog/edit/[slug]/page"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/not-found": {
      "filePath": "not-found.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/blog/$blogId": {
      "filePath": "blog/$blogId.tsx"
    },
    "/dashboard/general": {
      "filePath": "dashboard/general.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/security": {
      "filePath": "dashboard/security.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settings": {
      "filePath": "dashboard/settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/settingsLoading": {
      "filePath": "dashboard/settingsLoading.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/uploads": {
      "filePath": "dashboard/uploads.tsx",
      "parent": "/dashboard"
    },
    "/blog/": {
      "filePath": "blog/index.tsx"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/blog/BlogDashboard": {
      "filePath": "dashboard/blog/BlogDashboard.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/blog/new/page": {
      "filePath": "dashboard/blog/new/page.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/blog/edit/[slug]/page": {
      "filePath": "dashboard/blog/edit/[slug]/page.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
